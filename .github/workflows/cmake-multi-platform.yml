
name: Build the QuestTracker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [clang]
        include:
          - os: windows-latest
            cpp_compiler: clang++
          - os: ubuntu-latest
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        
    - name: Install Dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt update
        sudo apt install -y build-essential git make \
        pkg-config cmake ninja-build gnome-desktop-testing libasound2-dev libpulse-dev \
        libaudio-dev libjack-dev libsndio-dev libx11-dev libxext-dev \
        libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libxtst-dev \
        libxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev \
        libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev

    - name: Configure CMake
      run: >
        cmake --preset default

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --output-on-failure
    
    - name: Package binary
      id: package
      shell: bash
      run: |
        mkdir -p artifacts
        mkdir -p artifacts/lin
        mkdir -p artifacts/win
        mkdir -p artifacts/res
        if [ "$RUNNER_OS" == "Linux" ]; then
          cp build/bin/todo_list_app artifacts/lin/questTracker.elf
          cp build/bin/LeroyLettering.ttf artifacts/res/
        elif [ "$RUNNER_OS" == "Windows" ]; then
          cp build/bin/todo_list_app artifacts/win/questTracker.exe
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: questtracker-${{ runner.os }}
        path: artifacts/
        retention-days: 7

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: downloaded-artifacts

    - name: Display downloaded content
      run: ls -R downloaded-artifacts

    - name: Create GitHub Release
      uses: ncipollo/release-action@v1.14.0
      with:
        artifacts: "downloaded-artifacts/**"
        tag: v${{ github.run_number }}
        name: "QuestTracker v${{ github.run_number }}"
        body: |
          Automated release generated from commit `${{ github.sha }}`.
        token: ${{ secrets.GITHUB_TOKEN }}
        generateReleaseNotes: true
          
          
